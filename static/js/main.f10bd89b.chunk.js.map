{"version":3,"sources":["Components/Form/styles.module.css","Components/ContactsList/ListItem/styles.module.css","Components/ContactsList/styles.module.css","Components/Filter/styles.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/filter/filter-actions.js","redux/filter/filter-reducers.js","redux/store.js","Components/ContactsList/ContactsList.js","redux/contacts/contacts-selector.js","Components/Form/Form.js","redux/filter/filter-selector.js","Components/Filter/Filter.js","Components/ContactsList/ListItem/ListItem.js","App.js","index.js"],"names":["module","exports","addContact","createAction","contact","payload","id","name","number","deleteContact","contactsReducer","createReducer","state","filter","item","changeFilter","filterReducer","_","action","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","mainReducer","combineReducers","contacts","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ConctactsList","children","className","styles","contactsList","getContacts","getFilteredContacts","filterValue","toLowerCase","includes","Form","useState","setName","setNumber","useSelector","dispatch","useDispatch","inputHandler","evt","target","value","formReset","IdName","shortid","generate","IdNumber","onSubmit","preventDefault","map","find","alert","formLabel","htmlFor","type","pattern","title","onChange","required","submitBtn","getFilter","Filter","inputId","filterLabel","e","ListItem","listItem","itemText","deleteBtn","onClick","connect","ContactsList","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,UAAY,4B,mBCApED,EAAOC,QAAU,CAAC,SAAW,yBAAyB,SAAW,yBAAyB,UAAY,4B,mBCAtGD,EAAOC,QAAU,CAAC,aAAe,+B,mBCAjCD,EAAOC,QAAU,CAAC,YAAc,8B,gICCnBC,EAAaC,YAAa,gBAAgB,SAACC,GAAD,MAAc,CACjEC,QAAS,CACLC,GAAIF,EAAQE,GACZC,KAAMH,EAAQG,KACdC,OAAQJ,EAAQI,YAIXC,EAAgBN,YAAa,mBCe3BO,MAtBSC,YAmBZ,IAnByB,mBAChCT,GAAa,SAACU,EAAD,GAAuB,IAAdP,EAAa,EAAbA,QAEnB,MAAM,GAAN,mBAAWO,GAAX,CAAmBP,OAHU,cAKhCI,GAAgB,SAACG,EAAD,GAAuB,IAAdP,EAAa,EAAbA,QAGtB,OAFoBO,EAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKR,KAAOD,QAN1B,ICDxBU,EAAeZ,YAAa,iBCK1Ba,EAJOL,YAAc,GAAD,eAC9BI,GAAe,SAACE,EAAGC,GAAJ,OAAeA,EAAOb,Y,uCCYpCc,EAAgB,CAClBC,IAAK,WACLC,Q,OAAAA,EACAC,UAAW,CAAC,WAGVC,EAAU,sBAAOC,YAAqB,CAACC,kBAAmB,CAC1DC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SADhD,CAEPC,MAGHC,EAAcC,YAAgB,CAChCC,SAAU1B,EACVG,OAAQG,IAGNqB,EAAmBC,YAAenB,EAAee,GAEjDK,EAAQC,YAAe,CACzBC,QAASJ,EACTd,aACAmB,UAAUC,IAGRC,EAAYC,YAAaN,G,wCC7BhBO,MARf,YAAsC,IAAbC,EAAY,EAAZA,SACvB,OAAO,oBAAIC,UAAWC,IAAOC,aAAtB,SAAqCH,K,QCFjCI,EAAc,SAACvC,GAAD,OAAWA,EAAMwB,UAE/BgB,EAAsB,SAACxC,GAChC,IAAMyC,EAAczC,EAAMC,OAG1B,OAFiBsC,EAAYvC,GAEbC,QAAO,SAACC,GAAD,OACvBA,EAAKP,KAAK+C,cAAcC,SAASF,EAAYC,mB,iCC4FlCE,MA5Ff,WACE,MAAwBC,mBAAS,IAAjC,mBAAOlD,EAAP,KAAamD,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOjD,EAAP,KAAemD,EAAf,KACMvB,EAAWwB,YAAYT,GACvBU,EAAWC,cAEXC,EAAe,SAACC,GACpB,OAAQA,EAAIC,OAAO1D,MAEjB,IAAK,OACHmD,EAAQM,EAAIC,OAAOC,OACnB,MAEF,IAAK,SACHP,EAAUK,EAAIC,OAAOC,OACrB,MAEF,QACE,SAwBAC,EAAY,WAChBT,EAAQ,IACRC,EAAU,KAGNS,EAASC,IAAQC,WACjBC,EAAWF,IAAQC,WAEzB,OACE,uBAAME,SA7Bc,SAACR,GAIrB,GAHAA,EAAIS,iBACqBrC,EAASsC,KAAI,SAAC5D,GAAD,OAAUA,EAAKP,KAAK+C,iBAErCqB,MAAK,SAAC7D,GAAD,OAAUA,IAASP,EAAK+C,iBAGhD,OAFAsB,MAAM,2BACNlB,EAAQ,IAIV,IAAMtD,EAAU,CAChBE,GAAI+D,IAAQC,WACZ/D,KAAMA,EACNC,OAAQA,GAGRqD,EAAS3D,EAAWE,IACpB+D,KAYA,UACE,wBAAOnB,UAAWC,IAAO4B,UAAWC,QAASV,EAA7C,iBAEE,uBACE9D,GAAI8D,EACJW,KAAK,OACLxE,KAAK,OACLyE,QAAQ,yHACRC,MAAM,kcACNC,SAAUnB,EACVG,MAAO3D,EACP4E,UAAQ,OAIZ,wBAAOnC,UAAWC,IAAO4B,UAAWC,QAASP,EAA7C,mBAEE,uBACEjE,GAAIiE,EACJQ,KAAK,MACLxE,KAAK,SACLyE,QAAQ,yFACRC,MAAM,giBACNC,SAAUnB,EACVG,MAAO1D,EACP2E,UAAQ,OAGZ,wBAAQnC,UAAWC,IAAOmC,UAAWL,KAAK,SAA1C,6BCxFOM,EAAY,SAACzE,GAAD,OAAWA,EAAMC,Q,iBCoC3ByE,MA5Bf,WACE,IAAMjC,EAAcO,YAAYyB,GAC1BxB,EAAWC,cAEXyB,EAAUlB,IAAQC,WACxB,OACE,wBAAOtB,UAAWC,IAAOuC,YAAaV,QAASS,EAA/C,mBAEE,uBACEjF,GAAIiF,EACJR,KAAK,OACLxE,KAAK,SACL2D,MAAOb,EACP6B,SAAU,SAACO,GAAD,OAAO5B,EAAS9C,EAAa0E,EAAExB,OAAOC,e,iBCiBzCwB,MA/Bf,WACE,IAAMtD,EAAWwB,YAAYR,GACvBS,EAAWC,cAEjB,OAAO1B,EAASsC,KAAI,SAAC5D,GAAD,OAClB,qBAAIkC,UAAWC,IAAO0C,SAAtB,UACE,oBAAG3C,UAAWC,IAAO2C,SAArB,UACG9E,EAAKP,KADR,KACgBO,EAAKN,UAErB,wBACEwC,UAAWC,IAAO4C,UAClBd,KAAK,SACLe,QAAS,kBAAMjC,EAASpD,EAAcK,EAAKR,MAH7C,sBAJmCQ,EAAKR,QCO/ByF,kBAAQ,KAARA,EAZf,WACE,OACE,sBAAK/C,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAACgD,EAAD,UACE,cAAC,EAAD,Y,MCJRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU5D,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAa6D,QAAS,KAAMxD,UAAWA,EAAvC,SACE,cAAC,EAAD,UAINyD,SAASC,eAAe,W","file":"static/js/main.f10bd89b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitBtn\":\"styles_submitBtn__38nXg\",\"formLabel\":\"styles_formLabel__3iN6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"styles_listItem__lj9NO\",\"itemText\":\"styles_itemText__32SXH\",\"deleteBtn\":\"styles_deleteBtn__GM736\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"styles_contactsList__20Xbl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"styles_filterLabel__2ROXP\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add', (contact) => ({\r\n    payload: {\r\n        id: contact.id,\r\n        name: contact.name,\r\n        number: contact.number\r\n    }\r\n}));\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact } from './contacts-actions';\r\n\r\nconst contactsReducer = createReducer(localContacts(), {\r\n    [addContact]: (state, {payload}) => {\r\n        // localStorage.setItem(\"contacts\", JSON.stringify([...state, payload]));\r\n        return [...state,  payload]\r\n    },\r\n    [deleteContact]: (state, {payload}) => {\r\n        const newContacts = state.filter((item) => item.id !== payload);\r\n        // localStorage.setItem(\"contacts\", JSON.stringify(newContacts))\r\n        return newContacts;\r\n    },\r\n})\r\n\r\nfunction localContacts() {\r\n    // if (localStorage.contacts) {\r\n    //     const contactsFromLocalStorage = JSON.parse(\r\n    //     localStorage.getItem(\"contacts\")\r\n    //     );\r\n    //     return contactsFromLocalStorage\r\n    // };\r\n    return  []\r\n};\r\n\r\nexport default contactsReducer;","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const changeFilter = createAction('filter/change');\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { changeFilter } from './filter-actions';\r\n\r\nconst filterReducer = createReducer('', {\r\n    [changeFilter]: (_, action) => action.payload\r\n});\r\n\r\nexport default filterReducer;","import contactsReducer from './contacts/contacts-reducers';\r\nimport filterReducer from './filter/filter-reducers';\r\nimport { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [...getDefaultMiddleware({serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }}), logger];\r\n\r\n\r\nconst mainReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n    filter: filterReducer\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, mainReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport  { store, persistor };\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./styles.module.css\";\r\n\r\nfunction ConctactsList({ children }) {\r\n  return <ul className={styles.contactsList}>{children}</ul>;\r\n}\r\n\r\nConctactsList.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ConctactsList;\r\n","// import { useSelector } from \"react-redux\";\r\n\r\nexport const getContacts = (state) => state.contacts;\r\n\r\nexport const getFilteredContacts = (state) => {\r\n    const filterValue = state.filter;\r\n    const contacts = getContacts(state);\r\n\r\n    return contacts.filter((item) =>\r\n    item.name.toLowerCase().includes(filterValue.toLowerCase()));\r\n}","// import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch} from \"react-redux\";\r\nimport { addContact } from '../../redux/contacts/contacts-actions';\r\nimport { getContacts } from \"../../redux/contacts/contacts-selector\";\r\n\r\nimport shortid from \"shortid\";\r\nimport styles from \"./styles.module.css\";\r\n\r\nfunction Form() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const inputHandler = (evt) => {\r\n    switch (evt.target.name) {\r\n\r\n      case \"name\":\r\n        setName(evt.target.value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(evt.target.value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const submitHanlder = (evt) => {\r\n    evt.preventDefault();\r\n    const namesToLowerCase = contacts.map((item) => item.name.toLowerCase());\r\n// проверка на повторение имени\r\n    if (namesToLowerCase.find((item) => item === name.toLowerCase())) {\r\n      alert(\"please change name\");\r\n      setName('');\r\n      return \r\n    };\r\n// создзание нового контакта\r\n    const contact = {\r\n    id: shortid.generate(),\r\n    name: name,\r\n    number: number,\r\n    };\r\n\r\n    dispatch(addContact(contact));\r\n    formReset();\r\n  };\r\n\r\n  const formReset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const IdName = shortid.generate();\r\n  const IdNumber = shortid.generate();\r\n\r\n  return (\r\n    <form onSubmit={submitHanlder}>\r\n      <label className={styles.formLabel} htmlFor={IdName}>\r\n        Name\r\n        <input\r\n          id={IdName}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={inputHandler}\r\n          value={name}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.formLabel} htmlFor={IdNumber}>\r\n        Number\r\n        <input\r\n          id={IdNumber}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          onChange={inputHandler}\r\n          value={number}\r\n          required\r\n        />\r\n      </label>\r\n      <button className={styles.submitBtn} type=\"submit\">\r\n        Add Contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\n// Form.propTypes = {\r\n//   newContact: PropTypes.func.isRequired,\r\n//   contacts: PropTypes.array.isRequired\r\n// };\r\n\r\nexport default Form;\r\n","export const getFilter = (state) => state.filter;","// import PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeFilter } from '../../redux/filter/filter-actions';\r\nimport { getFilter } from \"../../redux/filter/filter-selector\";\r\n\r\nimport shortid from \"shortid\";\r\nimport styles from \"./styles.module.css\";\r\n\r\nfunction Filter() {\r\n  const filterValue = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  \r\n  const inputId = shortid.generate();\r\n  return (\r\n    <label className={styles.filterLabel} htmlFor={inputId}>\r\n      Search\r\n      <input\r\n        id={inputId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filterValue}\r\n        onChange={(e) => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\n// Filter.defaultProps = {\r\n//   filterValue: \"\",\r\n// };\r\n\r\n// Filter.propTypes = {\r\n//   changeFilter: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string,\r\n// };\r\n\r\nexport default Filter;\r\n","// import PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { deleteContact } from '../../../redux/contacts/contacts-actions';\r\nimport { getFilteredContacts } from \"../../../redux/contacts/contacts-selector\";\r\n\r\nimport styles from \"./styles.module.css\";\r\n\r\nfunction ListItem() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return contacts.map((item) => (\r\n    <li className={styles.listItem} key={item.id}>\r\n      <p className={styles.itemText}>\r\n        {item.name}: {item.number}\r\n      </p>\r\n      <button\r\n        className={styles.deleteBtn}\r\n        type=\"button\"\r\n        onClick={() => dispatch(deleteContact(item.id))}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  ));\r\n};\r\n\r\n// ListItem.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     })\r\n//   ),\r\n//   deleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default ListItem;\r\n","import { connect } from \"react-redux\";\r\nimport ContactsList from \"./Components/ContactsList/ContactsList\";\r\nimport Form from \"./Components/Form\";\r\nimport Filter from \"./Components/Filter\";\r\nimport ListItem from \"./Components/ContactsList/ListItem\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Form />\r\n      <Filter />\r\n      <ContactsList>\r\n        <ListItem  />\r\n      </ContactsList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null)(App);\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport {store, persistor} from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport \"modern-normalize\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}